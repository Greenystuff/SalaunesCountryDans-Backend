import mongoose from 'mongoose';

export const connectDB = async (): Promise<void> => {
    try {
        const mongoURI = process.env.MONGODB_URI;

        if (!mongoURI) {
            throw new Error("MONGODB_URI n'est pas d√©finie dans les variables d'environnement");
        }

        const options = {
            maxPoolSize: 10, // Maintenir jusqu'√† 10 connexions simultan√©es
            serverSelectionTimeoutMS: 5000, // Timeout de 5 secondes pour la s√©lection du serveur
            socketTimeoutMS: 45000, // Timeout de 45 secondes pour les op√©rations socket
            bufferCommands: false, // D√©sactiver le buffering des commandes
        };

        await mongoose.connect(mongoURI, options);

        console.log('‚úÖ Connexion MongoDB √©tablie avec succ√®s');

        // Gestion des √©v√©nements de connexion
        mongoose.connection.on('error', (err) => {
            console.error('‚ùå Erreur de connexion MongoDB:', err);
        });

        mongoose.connection.on('disconnected', () => {
            console.warn('‚ö†Ô∏è Connexion MongoDB perdue');
        });

        mongoose.connection.on('reconnected', () => {
            console.log('üîÑ Connexion MongoDB r√©tablie');
        });

        // Gestion propre de la fermeture
        process.on('SIGINT', async () => {
            await mongoose.connection.close();
            console.log("üì¥ Connexion MongoDB ferm√©e suite √† l'arr√™t de l'application");
            process.exit(0);
        });
    } catch (error) {
        console.error('‚ùå Erreur lors de la connexion √† MongoDB:', error);
        process.exit(1);
    }
};
